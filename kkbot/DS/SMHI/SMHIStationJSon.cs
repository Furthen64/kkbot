using System;
using System.Collections.Generic;
using System.Globalization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var SMHIStationJSon = SMHIStationJSon.FromJson(jsonString);


// Jag använde mig av " https://app.quicktype.io/?l=csharp " 


namespace kkbot.DS.SMHI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SMHIStationJSon
    {
        [JsonProperty("key")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Key { get; set; }

        [JsonProperty("updated")]
        public long Updated { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("owner")]
        public string Owner { get; set; }

        [JsonProperty("ownerCategory")]
        public string OwnerCategory { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("from")]
        public long From { get; set; }

        [JsonProperty("to")]
        public long To { get; set; }

        [JsonProperty("position")]
        public Position[] Position { get; set; }

        [JsonProperty("link")]
        public Link[] Link { get; set; }

        [JsonProperty("period")]
        public Period[] Period { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("rel")]
        public Rel Rel { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class Period
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("updated")]
        public long Updated { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("link")]
        public Link[] Link { get; set; }
    }

    public partial class Position
    {
        [JsonProperty("from")]
        public long From { get; set; }

        [JsonProperty("to")]
        public long To { get; set; }

        [JsonProperty("height")]
        public double Height { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public enum Rel { Parameter, Period, Station };

    public enum TypeEnum { ApplicationAtomXml, ApplicationJson, ApplicationXml };

    public partial class SMHIStationJSon
    {
        public static SMHIStationJSon FromJson(string json) => JsonConvert.DeserializeObject<SMHIStationJSon>(json, kkbot.DS.SMHI.Converter.Settings);
    }


    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class RelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rel) || t == typeof(Rel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "parameter":
                    return Rel.Parameter;
                case "period":
                    return Rel.Period;
                case "station":
                    return Rel.Station;
            }
            throw new Exception("Cannot unmarshal type Rel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rel)untypedValue;
            switch (value)
            {
                case Rel.Parameter:
                    serializer.Serialize(writer, "parameter");
                    return;
                case Rel.Period:
                    serializer.Serialize(writer, "period");
                    return;
                case Rel.Station:
                    serializer.Serialize(writer, "station");
                    return;
            }
            throw new Exception("Cannot marshal type Rel");
        }

        public static readonly RelConverter Singleton = new RelConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "application/atom+xml":
                    return TypeEnum.ApplicationAtomXml;
                case "application/json":
                    return TypeEnum.ApplicationJson;
                case "application/xml":
                    return TypeEnum.ApplicationXml;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.ApplicationAtomXml:
                    serializer.Serialize(writer, "application/atom+xml");
                    return;
                case TypeEnum.ApplicationJson:
                    serializer.Serialize(writer, "application/json");
                    return;
                case TypeEnum.ApplicationXml:
                    serializer.Serialize(writer, "application/xml");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
